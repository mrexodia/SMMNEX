typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;

typedef struct {
    uint8 value;
} bool <read=read_bool>;

string read_bool(bool& b) {
    return b.value ? "true" : "false";
}

typedef struct {
    uint32 pid;
} PID <read=read_PID>;

string read_PID(PID& pid) {
    string result;
    SPrintf(result, "%08xh (%u)", pid.pid, pid.pid);
    return result;
}

typedef struct {
    uint64 second : 6;
    uint64 minute : 6;
    uint64 hour : 5;
    uint64 day : 5;
    uint64 month : 4;
    uint64 year : 38;
} DateTimeBits <read=read_DateTimeBits>;

string read_DateTimeBits(DateTimeBits& dt) {
    local string result;
    SPrintf(result, "%04d-%02d-%02d %02d:%02d:%02d",
        dt.year,
        dt.month,
        dt.day,
        dt.hour,
        dt.minute,
        dt.second
    );
    return result;
};

typedef union {
    uint64 value;
    DateTimeBits bits;
} DateTime <read=read_DateTime>;

string read_DateTime(DateTime& dt)
{
    local string result;
    SPrintf(result, "%s (%LXh)", read_DateTimeBits(dt.bits), dt.value);
    return result;
}

typedef struct {
    uint16 len;
    char data[len] <optimize=false>;
} String <read=read_String>;

wstring read_String(String& s) {
    return StringToWString(s.data, CHARSET_UTF8);
}

typedef struct {
    uint16 len;
    unsigned char data[len] <optimize=false>;
} qBuffer <read=read_qBuffer>;

string python_bytes(qBuffer& b) {
    local string result = "b\"";
    local string temp;
    local int i;
    for(i = 0; i < b.len; i++) {
        SPrintf(temp, "\\x%02X", b.data[i]);
        result += temp;
    }
    result += "\"";
    return result;
};

string read_qBuffer(qBuffer& b) {
    local string result;
    SPrintf(result, "%xh (%u) bytes: %s", b.len, b.len, python_bytes(b));
    return result;
}

struct Buffer {
    uint32 len;
    unsigned char data[len] <optimize=false>;
};

struct qVector_uint32 {
    uint32 len;
    uint32 data[len] <optimize=false>;
};

struct qVector_qBuffer {
    uint32 len;
    qBuffer data[len] <optimize=false>;
};

typedef struct {
    uint8 version;
    uint32 size;
} StructureHeader <read=read_StructureHeader>;

string read_StructureHeader(StructureHeader& s) {
    string r;
    SPrintf(r, "version: %d, size: %Xh (%u)", s.version, s.size, s.size);
    return r;
}

typedef struct(StructureHeader& header)
{
    uint8 unk1 <optimize=false>;
    local int size = header.size - (startof(unk1) - startof(header)) + sizeof(StructureHeader);
    uint8 unk2[size - 1] <optimize=false>;
} UnknownStructure <read=read_UnknownStructure>;

string read_UnknownStructure(UnknownStructure& u)
{
    string result;
    SPrintf(result, "unknown data, size: %Xh (%u)", u.size, u.size);
    return result;
}

struct GenericStruct {
    StructureHeader header;
    UnknownStructure data(header);
};

struct GenericStructVector {
    uint32 count;
    GenericStruct data[count] <optimize=false>;
};

struct List_PID {
    uint32 count;
    PID data[count] <optimize=false>;
};

typedef struct {
    uint32 count;
    String data[count] <optimize=false>;
} List_String <read=read_List_String>;

wstring read_List_String(List_String& l) {
    local wstring result = L"[";
    local int i;
    for(i = 0; i < l.count; i++) {
        if(i > 0)
            result += L", ";
        result += L"\"";
        result += read_String(l.data[i]);
        result += L"\"";
    }
    result += L"]";
    return result;
}