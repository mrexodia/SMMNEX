#include "CommonTypes.bt"

// See: https://github.com/Kinnay/NintendoClients/wiki/Data-Store-Protocol-(SMM)#unknownstruct-structure

typedef struct {
    uint8 id : 7;
    uint8 request : 1;
    if(request == 0)
        uint8 result;
} Protocol <read=read_Protocol>;

typedef struct {
    uint32 id : 15;
    uint32 unk : 15;
} MethodId <read=read_MethodId>;

string read_MethodId(MethodId& m)
{
    string result;
    SPrintf(result, "0x%04X", m.id);
    return result;
}

string read_Protocol(Protocol& p)
{
    string result;
    SPrintf(result, "request: %u, id: 0x%02X (%u)", p.request, p.id, p.id);
    return result;
}

struct DataStorePersistenceTarget {
    StructureHeader header;
    PID ownerId;
    uint16 persistenceSlotId;
};

struct DataStoreGetMetaParam {
    StructureHeader header;
    uint64 dataId;
    DataStorePersistenceTarget persistenceTarget;
    uint8 resultOption;
    uint64 accessPassword;
};

struct DataStorePermission {
    StructureHeader header;
    uint8 permission;
    List_PID pids;
};

struct DataStoreRatingInfo {
    StructureHeader header;
    uint64 totalValue;
    uint32 count;
    uint64 initialValue;
};

struct DataStoreRatingInfoWithSlot {
    StructureHeader header;
    uint8 slot;
    DataStoreRatingInfo rating;
};

struct List_DataStoreRatingInfoWithSlot {
    uint32 count;
    DataStoreRatingInfoWithSlot data[count] <optimize=false>;
};

struct DataStoreMetaInfo {
    StructureHeader header;
    uint64 dataId;
    PID ownerId;
    uint32 size;
    String name;
    uint16 dataType;
    qBuffer metaBinary;
    DataStorePermission permission;
    DataStorePermission delPermission;
    DateTime createdTime;
    DateTime updatedTime;
    uint16 period;
    uint8 status;
    uint32 referredCnt;
    uint32 referDataId;
    uint32 flag;
    DateTime referredTime;
    DateTime expireTime;
    List_String tags;
    List_DataStoreRatingInfoWithSlot ratings;
};

struct Method50Request {
    StructureHeader header;
    uint32 magic;
    uint32 count;
    uint64 dataIds[count];
    uint8 unk;
};

struct DataStoreInfoStuff {
    StructureHeader header;
    uint32 unk1;
    uint32 unk2;
    DataStoreMetaInfo metaInfo;
};

struct List_DataStoreInfoStuff {
    uint32 count;
    DataStoreInfoStuff data[count] <optimize=false>;
};

struct List_Result {
    uint32 count;
    uint32 data[count] <optimize=false>;
};

typedef List_Result List_Uint32;

struct Method50Response {
    List_DataStoreInfoStuff infos;
    List_Result results;
};

struct Method61Request {
    uint32 unknown;
};

struct Method61Response {
    List_Uint32 unknown;
};

struct UnknownStruct {
    StructureHeader header;
    uint32 unk1;
    uint32 unk2;
};

struct UnknownStruct7 {
    StructureHeader header;
    uint8 unk1;
    List_Uint32 unk2;
    uint8 unk3;
    List_Uint32 unk4;
    uint16 unk5;
    DateTime unk6;
    DateTime unk7;
    DateTime unk8;
    DateTime unk9;
    uint32 unk10;
    List_String unk11;
    uint8 unk12;
    uint8 unk13;
    UnknownStruct unk14;
    uint8 unk15;
    uint32 unk16;
    bool unk17;
};  

struct Method65Request {
    UnknownStruct7 unknown1;
    List_String unknown2;
};

struct Method65Response {
    List_DataStoreInfoStuff infos;
};

struct Method74Request {
    uint32 unknown;
};

struct Method74Response {
    List_String unknown;
};

typedef struct {
    uint32 payload_size;
    Protocol protocol;
    uint32 call_id;
    MethodId method_id;
    local int protoid = protocol.id;
    local int methodid = method_id.id;
    if(protoid == 0x73)
    {
        if(methodid == 8) //GetMeta
        {
            if(protocol.request)
                DataStoreGetMetaParam req;
            else
                DataStoreMetaInfo res;
        }
        else if(methodid == 50)
        {
            if(protocol.request)
                Method50Request req;
            else
                Method50Response res;
        }
        else if(methodid == 61)
        {
            if(protocol.request)
                Method61Request req;
            else
                Method61Response res;
        }
        else if(methodid == 65)
        {
            if(protocol.request)
                Method65Request req;
            else
                Method65Response res;
        }
        else if(methodid == 74)
        {
            if(protocol.request)
                Method74Request req;
            else
                Method74Response res;
        }
        else
        {
            union
            {
                uint8 lol;
                uint8 payload[payload_size - (protocol.request ? 9 : 10)] <optimize=false>;
            } u;
        }
    }
    else
    {
        union
        {
            uint8 lol;
            uint8 payload[payload_size - (protocol.request ? 9 : 10)] <optimize=false>;
        } u;
    }
} NEXRpc <read=read_NEXRpc>;

string protocolName(uint8 protocol)
{
    switch(protocol)
    {
    case 0x0A: return "Authentication";
    case 0x0B: return "Secure Connection";
    case 0x66: return "Friends Wii U";
    case 0x73: return "Data Store";
    }
    local string result;
    SPrintf(result, "Unknown_0x%02x", protocol);
    return result;
}

string methodName(uint8 protocol, uint32 method)
{
    switch(protocol)
    {
    case 0x0A:
        switch(method)
        {
        case 1: return "Login";
        case 2: return "LoginEx";
        case 3: return "RequestTicket";
        }
        break;
    case 0x0B:
        switch(method)
        {
        case 1: return "Register";
        case 4: return "RegisterEx";
        }
        break;
    case 0x66:
        switch(method)
        {
        case 1: return "GetAllInformation";
        }
        break;
    case 0x73:
        switch(method)
        {
        case 8: return "GetMeta";
        case 50: return "Method50";
        case 61: return "Method61";
        case 65: return "Method65";
        case 74: return "Method74";
        }
        break;
    }
    local string result;
    SPrintf(result, "Unknown_0x%04x(%u)", method, method);
    return result;
}

string read_NEXRpc(NEXRpc& rpc)
{
    local string result;
    local string type = "Response";
    if(rpc.protocol.request)
        type = "Request";
    SPrintf(result, "NEX %s %s->%s",
        type,
        protocolName(rpc.protocol.id),
        methodName(rpc.protocol.id, rpc.method_id.id)
    );
    return result;
}

NEXRpc x[54] <optimize=false>;