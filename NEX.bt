#include "CommonTypes.bt"

typedef struct {
    uint64 value;
} DataId <read=read_DataId>;

string read_DataId(DataId& id) {
    local string result;
    SPrintf(result, "%LXh (%Lu)", id.value, id.value);
    return result;
}

struct BPFC {
    uint32 magic; //BPFC
    uint32 unk1;
    uint32 unk2;
    uint32 unk3;
    uint32 unk4;
    uint32 unk5;
    uint8 miidata[96];
    uint32 unk6;
    uint32 unk7;
    uint32 unk8;
    uint32 unk9;
    uint32 unk10;
};
// BPFC magic, 

// See: https://github.com/Kinnay/NintendoClients/wiki/Data-Store-Protocol-(SMM)#unknownstruct-structure
local int counter = 0;
typedef struct {
    uint8 id : 7;
    uint8 request : 1;
    if(request == 0)
        uint8 result;
} Protocol <read=read_Protocol>;

typedef struct {
    uint32 id : 15;
    uint32 unk : 15;
} MethodId <read=read_MethodId>;

string read_MethodId(MethodId& m)
{
    string result;
    SPrintf(result, "0x%04X", m.id);
    return result;
}

string read_Protocol(Protocol& p)
{
    string result;
    SPrintf(result, "request: %u, id: 0x%02X (%u)", p.request, p.id, p.id);
    return result;
}

struct DataStorePersistenceTarget {
    StructureHeader header;
    PID ownerId;
    uint16 persistenceSlotId;
};

struct DataStoreGetMetaParam {
    StructureHeader header;
    DataId dataId;
    DataStorePersistenceTarget persistenceTarget;
    uint8 resultOption;
    uint64 accessPassword;
};

struct DataStorePermission {
    StructureHeader header;
    uint8 permission;
    List_PID pids;
};

struct DataStoreRatingInfo {
    StructureHeader header;
    uint64 totalValue;
    uint32 count;
    uint64 initialValue;
};

typedef struct {
    StructureHeader header;
    uint8 slot;
    DataStoreRatingInfo rating;
} DataStoreRatingInfoWithSlot <read=read_DataStoreRatingInfoWithSlot>;

string read_DataStoreRatingInfoWithSlot(DataStoreRatingInfoWithSlot& r) {
    local string result;
    SPrintf(result, "rating_slot(%u, %u, %u, %u)",
        r.slot,
        r.rating.totalValue,
        r.rating.count,
        r.rating.initialValue
    );
    return result;
}

struct List_DataStoreRatingInfoWithSlot {
    uint32 count;
    DataStoreRatingInfoWithSlot data[count] <optimize=false>;
};

struct DataStoreMetaInfo {
    StructureHeader header;
    DataId dataId;
    PID ownerId;
    uint32 size;
    String name;
    uint16 dataType;
    qBuffer metaBinary;
    DataStorePermission permission;
    DataStorePermission delPermission;
    DateTime createdTime;
    DateTime updatedTime;
    uint16 period;
    uint8 status;
    uint32 referredCnt;
    uint32 referDataId;
    uint32 flag;
    DateTime referredTime;
    DateTime expireTime;
    List_String tags;
    List_DataStoreRatingInfoWithSlot ratings;
};

struct List_DataStoreMetaInfo {
    uint32 count;
    DataStoreMetaInfo data[count] <optimize=false>;
};

struct List_DataId {
    uint32 count;
    DataId data[count] <optimize=false>;
};

struct Method50Request {
    StructureHeader header;
    uint32 magic;
    List_DataId dataIds;
    uint8 unk;
};

typedef struct {
    StructureHeader header;
    uint32 unk1;
    uint32 stars_received;
    DataStoreMetaInfo metaInfo;
} DataStoreInfoStuff <read=read_DataStoreInfoStuff>;

string read_DataStoreInfoStuff(DataStoreInfoStuff& i) {
    local string result;
    SPrintf(result, "%Lu", i.metaInfo.dataId.value);
    return result;
}

struct List_DataStoreInfoStuff {
    uint32 count;
    DataStoreInfoStuff data[count] <optimize=false>;
};

typedef struct {
    uint32 count;
    uint32 data[count] <optimize=false>;
} List_Result <read=read_List_Result>;

string read_List_Result(List_Result& l) {
    local string result = "[";
    local string temp;
    local int i = 0;
    while(i < l.count)
    {
        if(i > 0)
            result += ", ";
        SPrintf(temp, "0x%X", l.data[i]);
        result += temp;
        i++;
    }
    result += "]";
    return result;
}

typedef List_Result List_Uint32;

struct Method50Response {
    List_DataStoreInfoStuff infos;
    List_Result results;
};

struct Method61Request {
    uint32 unknown;
};

struct Method61Response {
    List_Uint32 unknown;
};

struct UnknownStruct {
    StructureHeader header;
    uint32 unk1;
    uint32 unk2;
};

struct UnknownStruct7 {
    StructureHeader header;
    uint8 unk1;
    List_Uint32 unk2;
    uint8 unk3;
    List_Uint32 unk4;
    uint16 unk5;
    DateTime unk6;
    DateTime unk7;
    DateTime unk8;
    DateTime unk9;
    uint32 unk10;
    List_String unk11;
    uint8 unk12;
    uint8 unk13;
    UnknownStruct unk14;
    uint8 unk15;
    uint32 unk16;
    bool unk17;
};  

struct Method65Request {
    UnknownStruct7 unknown1;
    List_String unknown2;
};

struct Method65Response {
    List_DataStoreInfoStuff infos;
};

typedef struct {
    uint32 unknown;
} Method74Request <read=read_Method74Request>;

string read_Method74Request(Method74Request& r) {
    local string result;
    SPrintf(result, "%Xh (%u)", r.unknown, r.unknown);
    return result;
}

struct Method74Response {
    List_String unknown;
};

struct DataStoreKeyValue {
    StructureHeader header;
    String key;
    String value;
};

struct DataStoreKeyValueList {
    uint32 count;
    DataStoreKeyValue data[count] <optimize=false>;
};

struct DataStoreReqGetInfo {
    StructureHeader header;
    String url;
    Printf("%s\n", url.data);
    DataStoreKeyValueList requestHeaders;
    uint32 size;
    Buffer rootCaCert;
    DataId dataId;
};

struct DataStorePrepareGetParam {
    StructureHeader header;
    DataId dataId;
    uint32 lockId;
    DataStorePersistenceTarget persistenceTarget;
    uint64 accessPassword;
    List_String extraData;
};

struct UnknownStruct2 {
    StructureHeader header;
    DataId dataId;
    uint8 unk2;
};

struct List_UnknownStruct2 {
    uint32 count;
    UnknownStruct2 data[count] <optimize=false>;
};

struct Method78Request {
    List_UnknownStruct2 unknown;
    DataStoreGetMetaParam getMetaParam;
};

struct UnknownStruct3 {
    StructureHeader header;
    uint64 unk1;
    uint8 unk2;
    uint32 unk3;
    uint32 unk4;
    uint32 unk5;
    DateTime unk6;
    DateTime unk7;
};

struct List_UnknownStruct3 {
    uint32 count;
    UnknownStruct3 data[count] <optimize=false>;
};

struct Method78Response {
    List_DataStoreMetaInfo metaInfos;
    List_UnknownStruct3 unknown;
    List_Result results;
};

struct UnknownStruct4 {
    StructureHeader header;
    DataId dataId;
    uint32 unk2;
};

struct Method54Request {
    UnknownStruct4 unknown;
};

struct Method54Response {
    qVector_qBuffer unknown;
};

struct Method72Request {
    UnknownStruct2 param;
};

struct Method72Response {
    UnknownStruct3 unknown;
};

struct GetMetasMultipleParamRequest {
    uint32 count;
    DataStoreGetMetaParam data[count] <optimize=false>;
};

struct GetMetasMultipleParamResponse {
    List_DataStoreMetaInfo infos;
    List_Result results;
};

typedef struct {
    uint32 payload_size;
    Protocol protocol;
    uint32 call_id;
    MethodId method_id;
    local int protoid = protocol.id;
    local int methodid = method_id.id;
    if(protoid == 0x73)
    {
        if(methodid == 8) //GetMeta
        {
            if(protocol.request)
                DataStoreGetMetaParam req;
            else
                DataStoreMetaInfo res;
        }
        else if(methodid == 25) // PrepareGetObject
        {
            if(protocol.request)
                DataStorePrepareGetParam req;
            else
                DataStoreReqGetInfo res;
        }
        else if(methodid == 36) // GetMetasMultipleParam
        {
            if(protocol.request)
                GetMetasMultipleParamRequest req;
            else
                GetMetasMultipleParamResponse res;
        }
        else if(methodid == 50)
        {
            if(protocol.request)
                Method50Request req;
            else
                Method50Response res;
        }
        else if(methodid == 61)
        {
            if(protocol.request)
                Method61Request req;
            else
                Method61Response res;
        }
        else if(methodid == 65 || methodid == 66)
        {
            if(protocol.request)
                Method65Request req;
            else
                Method65Response res;
        }
        else if(methodid == 74)
        {
            if(protocol.request)
                Method74Request req;
            else
                Method74Response res;
        }
        else if(methodid == 78)
        {
            if(protocol.request)
                Method78Request req;
            else
                Method78Response res;
        }
        else if(methodid == 54)
        {
            if(protocol.request)
                Method54Request req;
            else
                Method54Response res;
        }
        else if(methodid == 72)
        {
            if(protocol.request)
                Method72Request req;
            else
                Method72Response res;
        }
        else
        {
            uint8 payload[payload_size - (protocol.request ? 9 : 10)] <optimize=false>;
        }
    }
    else
    {
        uint8 payload[payload_size - (protocol.request ? 9 : 10)] <optimize=false>;
    }
} NEXRpc <read=read_NEXRpc>;

string protocolName(uint8 protocol)
{
    switch(protocol)
    {
    case 0x0A: return "Authentication";
    case 0x0B: return "Secure Connection";
    case 0x66: return "Friends Wii U";
    case 0x73: return "Data Store";
    }
    local string result;
    SPrintf(result, "Unknown_0x%02x", protocol);
    return result;
}

string methodName(uint8 protocol, uint32 method)
{
    switch(protocol)
    {
    case 0x0A:
        switch(method)
        {
        case 1: return "Login";
        case 2: return "LoginEx";
        case 3: return "RequestTicket";
        }
        break;
    case 0x0B:
        switch(method)
        {
        case 1: return "Register";
        case 4: return "RegisterEx";
        }
        break;
    case 0x66:
        switch(method)
        {
        case 1: return "GetAllInformation";
        }
        break;
    case 0x73:
        switch(method)
        {
        case 8: return "GetMeta";
        case 25: return "PrepareGetObject";
        case 36: return "GetMetasMultipleParam";
        case 50: return "Method50";
        case 61: return "Method61";
        case 65: return "Method65";
        case 72: return "Method72";
        case 74: return "Method74";
        case 78: return "Method78";
        }
        break;
    }
    local string result;
    SPrintf(result, "Unknown_0x%04x(%u)", method, method);
    return result;
}

string read_NEXRpc(NEXRpc& rpc)
{
    local string result;
    local string type = "Response";
    if(rpc.protocol.request)
        type = "Request";
    SPrintf(result, "NEX %s %s->%s",
        type,
        protocolName(rpc.protocol.id),
        methodName(rpc.protocol.id, rpc.method_id.id)
    );
    return result;
}